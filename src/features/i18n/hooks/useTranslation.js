import { useTranslation as useI18nTranslation } from "react-i18next";

/**
 * Hook personalizado para tradu√ß√£o
 * Extens√£o do useTranslation do react-i18next com funcionalidades adicionais
 */
export const useTranslation = (namespace = "translation") => {
  const { t, i18n, ready } = useI18nTranslation(namespace);

  /**
   * Fun√ß√£o de tradu√ß√£o com fallback
   * @param {string} key Chave da tradu√ß√£o
   * @param {object} options Op√ß√µes de interpola√ß√£o e configura√ß√£o
   * @returns {string} Texto traduzido
   */
  const translate = (key, options = {}) => {
    if (!ready) {
      return key; // Retorna a chave enquanto n√£o carrega
    }

    try {
      const translated = t(key, options);

      // Se a tradu√ß√£o √© igual √† chave, pode ser que n√£o exista
      if (translated === key && !options.defaultValue) {
        console.warn(`Translation missing for key: ${key}`);
      }

      return translated;
    } catch (error) {
      console.error(`Translation error for key "${key}":`, error);
      return key;
    }
  };

  /**
   * Muda o idioma da aplica√ß√£o
   * @param {string} language C√≥digo do idioma (pt-BR, en-US)
   * @returns {Promise} Promise que resolve quando o idioma for alterado
   */
  const setLanguage = async (language) => {
    try {
      // Verificar se o idioma √© suportado
      const supportedLanguages = i18n.options.supportedLngs || [
        "pt-BR",
        "en-US",
      ];
      if (!supportedLanguages.includes(language)) {
        console.warn(
          `Language ${language} is not supported. Using fallback: pt-BR`,
        );
        language = "pt-BR";
      }

      await i18n.changeLanguage(language);

      // Salvar prefer√™ncia no localStorage
      localStorage.setItem("pokemon-app-language", language);

      // Disparar evento customizado para outros componentes
      window.dispatchEvent(
        new CustomEvent("languageChanged", {
          detail: { language },
        }),
      );

      return true;
    } catch (error) {
      console.error("Error changing language:", error);
      return false;
    }
  };

  /**
   * Obt√©m informa√ß√µes do idioma atual
   * @returns {object} Informa√ß√µes do idioma
   */
  const currentLanguageInfo = () => {
    const current = i18n?.language || "pt-BR";
    return {
      code: current,
      name: current === "pt-BR" ? "Portugu√™s (Brasil)" : "English",
      nativeName: current === "pt-BR" ? "Portugu√™s" : "English",
      flag: current === "pt-BR" ? "üáßüá∑" : "üá∫üá∏",
    };
  };

  /**
   * Obt√©m lista de idiomas dispon√≠veis com informa√ß√µes
   * @returns {Array} Lista de idiomas dispon√≠veis
   */
  const availableLanguages = () => {
    // Lista fixa de idiomas √∫nicos para evitar duplicatas
    const supportedLanguages = ["pt-BR", "en"];

    return supportedLanguages.map((lng) => ({
      code: lng,
      name: lng === "pt-BR" ? "Portugu√™s (Brasil)" : "English",
      nativeName: lng === "pt-BR" ? "Portugu√™s" : "English",
      flag: lng === "pt-BR" ? "üáßüá∑" : "üá∫üá∏",
    }));
  };

  /**
   * Verifica se est√° carregando tradu√ß√µes
   * @returns {boolean} True se ainda est√° carregando
   */
  const isLoading = () => {
    return !ready;
  };

  /**
   * Obt√©m o idioma atual
   * @returns {string} C√≥digo do idioma atual
   */
  const currentLanguage = () => {
    return i18n.language;
  };

  /**
   * Traduz baseado em contagem (singular/plural)
   * @param {string} key Chave base da tradu√ß√£o
   * @param {number} count N√∫mero para determinar plural
   * @param {object} options Op√ß√µes adicionais
   * @returns {string} Texto traduzido
   */
  const translateCount = (key, count, options = {}) => {
    const pluralKey = count === 1 ? key : `${key}_other`;

    return translate(pluralKey, {
      count,
      ...options,
    });
  };

  /**
   * Traduz e formata com interpola√ß√£o de data
   * @param {string} key Chave da tradu√ß√£o
   * @param {Date} date Data para formatar
   * @param {object} options Op√ß√µes de formata√ß√£o
   * @returns {string} Texto traduzido com data formatada
   */
  const translateDate = (key, date, options = {}) => {
    const formatter = new Intl.DateTimeFormat(currentLanguage(), {
      dateStyle: "medium",
      timeStyle: "short",
      ...options,
    });

    return translate(key, {
      date: formatter.format(date),
    });
  };

  /**
   * Traduz e formata n√∫meros
   * @param {string} key Chave da tradu√ß√£o
   * @param {number} number N√∫mero para formatar
   * @param {object} options Op√ß√µes de formata√ß√£o
   * @returns {string} Texto traduzido com n√∫mero formatado
   */
  const translateNumber = (key, number, options = {}) => {
    const formatter = new Intl.NumberFormat(currentLanguage(), options);

    return translate(key, {
      number: formatter.format(number),
    });
  };

  /**
   * Traduz array de chaves e retorna array de tradu√ß√µes
   * @param {Array<string>} keys Array de chaves
   * @param {object} options Op√ß√µes comuns para todas as tradu√ß√µes
   * @returns {Array<string>} Array de tradu√ß√µes
   */
  const translateMultiple = (keys, options = {}) => {
    return keys.map((key) => translate(key, options));
  };

  /**
   * Verifica se uma tradu√ß√£o existe
   * @param {string} key Chave da tradu√ß√£o
   * @returns {boolean} True se a tradu√ß√£o existe
   */
  const hasTranslation = (key) => {
    return i18n.exists(key);
  };

  /**
   * Obt√©m tradu√ß√£o raw (sem interpola√ß√£o)
   * @param {string} key Chave da tradu√ß√£o
   * @returns {string} Tradu√ß√£o raw
   */
  const getRawTranslation = (key) => {
    return i18n.getResource(currentLanguage(), "translation", key);
  };

  return {
    // Fun√ß√£o principal de tradu√ß√£o (alias para melhor DX)
    t: translate,
    translate,

    // Gerenciamento de idioma
    setLanguage,
    currentLanguage,
    currentLanguageInfo,
    availableLanguages,

    // Estado
    isLoading,
    ready,

    // Fun√ß√µes utilit√°rias
    translateCount,
    translateDate,
    translateNumber,
    translateMultiple,
    hasTranslation,
    getRawTranslation,

    // Inst√¢ncia do i18n (para casos avan√ßados)
    i18n,
  };
};
